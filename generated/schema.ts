// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewsfeedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewsfeedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewsfeedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewsfeedEvent", id.toString(), this);
    }
  }

  static load(id: string): NewsfeedEvent | null {
    return changetype<NewsfeedEvent | null>(store.get("NewsfeedEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get answered(): boolean {
    let value = this.get("answered");
    return value!.toBoolean();
  }

  set answered(value: boolean) {
    this.set("answered", Value.fromBoolean(value));
  }

  get question(): string | null {
    let value = this.get("question");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set question(value: string | null) {
    if (!value) {
      this.unset("question");
    } else {
      this.set("question", Value.fromString(<string>value));
    }
  }

  get answer(): string | null {
    let value = this.get("answer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set answer(value: string | null) {
    if (!value) {
      this.unset("answer");
    } else {
      this.set("answer", Value.fromString(<string>value));
    }
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get expired(): boolean {
    let value = this.get("expired");
    return value!.toBoolean();
  }

  set expired(value: boolean) {
    this.set("expired", Value.fromBoolean(value));
  }
}

export class QuestionAnswered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionAnswered entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionAnswered must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionAnswered", id.toString(), this);
    }
  }

  static load(id: string): QuestionAnswered | null {
    return changetype<QuestionAnswered | null>(
      store.get("QuestionAnswered", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get answer(): string {
    let value = this.get("answer");
    return value!.toString();
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }
}

export class QuestionAsked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionAsked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionAsked must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionAsked", id.toString(), this);
    }
  }

  static load(id: string): QuestionAsked | null {
    return changetype<QuestionAsked | null>(store.get("QuestionAsked", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get question(): string {
    let value = this.get("question");
    return value!.toString();
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class QuestionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionCanceled", id.toString(), this);
    }
  }

  static load(id: string): QuestionCanceled | null {
    return changetype<QuestionCanceled | null>(
      store.get("QuestionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdraw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toString(), this);
    }
  }

  static load(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get withdrawalBy(): Bytes {
    let value = this.get("withdrawalBy");
    return value!.toBytes();
  }

  set withdrawalBy(value: Bytes) {
    this.set("withdrawalBy", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get hasAsked(): boolean {
    let value = this.get("hasAsked");
    return value!.toBoolean();
  }

  set hasAsked(value: boolean) {
    this.set("hasAsked", Value.fromBoolean(value));
  }

  get hasAnswered(): boolean {
    let value = this.get("hasAnswered");
    return value!.toBoolean();
  }

  set hasAnswered(value: boolean) {
    this.set("hasAnswered", Value.fromBoolean(value));
  }

  get lastActivityDate(): BigInt {
    let value = this.get("lastActivityDate");
    return value!.toBigInt();
  }

  set lastActivityDate(value: BigInt) {
    this.set("lastActivityDate", Value.fromBigInt(value));
  }

  get numberOfQuestionsAsked(): BigInt | null {
    let value = this.get("numberOfQuestionsAsked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfQuestionsAsked(value: BigInt | null) {
    if (!value) {
      this.unset("numberOfQuestionsAsked");
    } else {
      this.set("numberOfQuestionsAsked", Value.fromBigInt(<BigInt>value));
    }
  }

  get numberOfQuestionsAnswered(): BigInt | null {
    let value = this.get("numberOfQuestionsAnswered");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfQuestionsAnswered(value: BigInt | null) {
    if (!value) {
      this.unset("numberOfQuestionsAnswered");
    } else {
      this.set("numberOfQuestionsAnswered", Value.fromBigInt(<BigInt>value));
    }
  }
}
