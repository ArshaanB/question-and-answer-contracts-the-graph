// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewsfeedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewsfeedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewsfeedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewsfeedEvent", id.toString(), this);
    }
  }

  static load(id: string): NewsfeedEvent | null {
    return changetype<NewsfeedEvent | null>(store.get("NewsfeedEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}

export class QuestionAnswered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionAnswered entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionAnswered must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionAnswered", id.toString(), this);
    }
  }

  static load(id: string): QuestionAnswered | null {
    return changetype<QuestionAnswered | null>(
      store.get("QuestionAnswered", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get answer(): string {
    let value = this.get("answer");
    return value!.toString();
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }
}

export class QuestionAsked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionAsked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionAsked must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionAsked", id.toString(), this);
    }
  }

  static load(id: string): QuestionAsked | null {
    return changetype<QuestionAsked | null>(store.get("QuestionAsked", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get question(): string {
    let value = this.get("question");
    return value!.toString();
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }
}

export class QuestionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionCanceled", id.toString(), this);
    }
  }

  static load(id: string): QuestionCanceled | null {
    return changetype<QuestionCanceled | null>(
      store.get("QuestionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}

export class QuestionExpired extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestionExpired entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestionExpired must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestionExpired", id.toString(), this);
    }
  }

  static load(id: string): QuestionExpired | null {
    return changetype<QuestionExpired | null>(store.get("QuestionExpired", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questioner(): Bytes {
    let value = this.get("questioner");
    return value!.toBytes();
  }

  set questioner(value: Bytes) {
    this.set("questioner", Value.fromBytes(value));
  }

  get answerer(): Bytes {
    let value = this.get("answerer");
    return value!.toBytes();
  }

  set answerer(value: Bytes) {
    this.set("answerer", Value.fromBytes(value));
  }

  get questionId(): BigInt {
    let value = this.get("questionId");
    return value!.toBigInt();
  }

  set questionId(value: BigInt) {
    this.set("questionId", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}
